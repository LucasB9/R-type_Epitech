RFC 10000: R-Type network communication protocol
Date: 2023-09-27
Author(s): Martin d'HÃ©rouville <martin.d-herouville@epitech.eu>
Status: Standards Track

              R-Type game network communication protocol

R-Type is a game created in 1987. It is a side-scrolling shoot-em-up
game. The player controls a spaceship and must destroy enemies and
bosses to finish the level. The player can also collect power-ups to
upgrade his spaceship. We re-created this game in 2023 with the same
gameplay, but with better graphics and sound, and with new features
including a multiplayer mode. This version of the game is a network
game. The player can play with other players on the same server.

======================================================================

Table of contents

1. Introduction
2. Motivation
3. Requirements and Specifications
    3.1. Data Format
    3.2. Data Types
4. Message Descriptions
    4.1. Screen Progression
        4.1.1. Message size
        4.1.2. Message Format
        4.1.3. Message Example
    4.2. Player Asking to Move
        4.2.1. Message size
        4.2.2. Message Format
        4.2.3. Message Example
    4.3. Player Position
        4.3.1. Message size
        4.3.2. Message Format
        4.3.3. Message Example
    4.4. Missile Position
        4.4.1. Message size
        4.4.2. Message Format
        4.4.3. Message Example
    4.5. Player Asking to Shoot
        4.5.1. Message size
        4.5.2. Message Format
        4.5.3. Message Example
    4.6. Player Score
        4.6.1. Message size
        4.6.2. Message Format
        4.6.3. Message Example
    4.7. Enemy Position
        4.7.1. Message size
        4.7.2. Message Format
        4.7.3. Message Example
    4.8. Player Asking to Create a Room
        4.8.1. Message size
        4.8.2. Message Format
        4.8.3. Message Example
    4.9. Player Asking to Join a Room
        4.9.1. Message size
        4.9.2. Message Format
        4.9.3. Message Example
    4.10. Room Joined
        4.10.1. Message size
        4.10.2. Message Format
        4.10.3. Message Example
    4.11. Time Before the Game Starts
        4.11.1. Message size
        4.11.2. Message Format
        4.11.3. Message Example
    4.12. Client Ping
        4.12.1. Message size
        4.12.2. Message Format
        4.12.3. Message Example
    4.13. Other Player Joined Game
        4.13.1. Message size
        4.13.2. Message Format
        4.13.3. Message Example
    4.14. Other Player Left Game
        4.14.1. Message size
        4.14.2. Message Format
        4.14.3. Message Example
    4.15. Missile Destroyed
        4.15.1. Message size
        4.15.2. Message Format
        4.15.3. Message Example
5. Communication Flow
6. Security and Error Handling
7. References
8. Copyright
9. Authors
10. Acknowledgments

======================================================================

1. Introduction

    This RFC defines the communication protocol between the server and
    the client for the network game "R-Type". The server is the host
    of the game, and the client is the player.

2. Motivation

    The protocol is designed to facilitate efficient and secure
    communication between the server and the client, necessary for the
    networking features of the game.

3. Requirements and Specifications

    This section details the requirements and specifications of the
    protocol.

    3.1. Data Format

        This protocol is designed to be used with the UDP protocol[1].
        The server and the client communicate with each other by
        sending and receiving datas. Datas are formatted using binary.
        Each data sent begins with one byte indicating the type of the
        data, followed by the data itself.

    3.2. Data Types

        Here is the list of the data types. The description of each
        data type is detailed in the next section. When a data type is
        sent by the server, it is prefixed by the letter "s". When a
        data type is sent by the client, it is prefixed by the
        letter "c".

        s-1 = screen progression
        c-2 = player asking to move
        s-3 = player position
        s-4 = missile position
        c-5 = player asking to shoot
        s-6 = player score
        s-7 = enemy position
        c-8 = player asking to create a room
        c-9 = player asking to join a room
        s-10 = room joined
        s-11 = time before the game starts
        c-12 = client ping
        s-13 = other player joined game
        s-14 = other player left game
        s-15 = missile destroyed

4. Message Descriptions

    This section details each message type.

    4.1. Screen Progression

        This message is sent by the server to the client to indicate
        the progression of the screen.

        4.1.1. Message size

            The message is 5 bytes long.

        4.1.2. Message Format

            The message is formatted as follows:

            1 byte: message type (1)
            4 byte: position of the screen (int)

        4.1.3. Message Example

            0x01 0x00 0x00 0x00 0x01

    4.2. Player Asking to Move

        This message is sent by the client to the server to indicate
        that the player wants to move.

        4.2.1. Message size

            The message is 3 bytes long.

        4.2.2. Message Format

            The message is formatted as follows:

            1 byte: message type (2)
            1 byte: direction (char)
                -> 1 = up ; 2 = down ; 3 = left ; 4 = right
            1 byte: number of times (char) -> 0-255

        4.2.3. Message Example

            0x02 0x01 0x01

    4.3. Player Position

        This message is sent by the server to the client to indicate
        the position of a player.

        4.3.1. Message size

            The message is 6 bytes long.

        4.3.2. Message Format

            The message is formatted as follows:

            1 byte: message type (3)
            1 byte: player id (char)
            2 byte: position x (short)
            2 byte: position y (short)

        4.3.3. Message Example

            0x03 0x01 0x00 0x01 0x00 0x01

    4.4. Missile Position

        This message is sent by the server to the client to indicate
        the position of a missile.

        4.4.1. Message size

            The message is 10 bytes long.

        4.4.2. Message Format

            The message is formatted as follows:

            1 byte: message type (4)
            4 byte: missile id (int)
            1 byte: missile type (char) -> 1 = player ; 2 = enemy
            2 byte: position x (short)
            2 byte: position y (short)

        4.4.3. Message Example

            0x04 0x00 0x00 0x00 0x01 0x02 0x00 0x01 0x00 0x01

    4.5. Player Asking to Shoot

        This message is sent by the client to the server to indicate
        that the player wants to shoot.

        4.5.1. Message size

            The message is 1 byte long.

        4.5.2. Message Format

            The message is formatted as follows:

            1 byte: message type (5)

        4.5.3. Message Example

            0x05

    4.6. Player Score

        This message is sent by the server to the client to indicate
        the score of the player (the client).

        4.6.1. Message size

            The message is 5 bytes long.

        4.6.2. Message Format

            The message is formatted as follows:

            1 byte: message type (6)
            4 byte: score (int)

        4.6.3. Message Example

            0x06 0x00 0x00 0x00 0x01

    4.7. Enemy Position

        This message is sent by the server to the client to indicate
        the position of an enemy.

        4.7.1. Message size

            The message is 6 bytes long.

        4.7.2. Message Format

            The message is formatted as follows:

            1 byte: message type (7)
            1 byte: enemy id (char)
            2 byte: position x (short)
            2 byte: position y (short)

        4.7.3. Message Example

            0x07 0x01 0x00 0x01 0x00 0x01

    4.8. Player Asking to Create a Room

        This message is sent by the client to the server to indicate
        that the player wants to create a room.

        4.8.1. Message size

            The message is 2 bytes long.

        4.8.2. Message Format

            The message is formatted as follows:

            1 byte: message type (8)
            1 byte: booleen private room (char) -> 0 = public ; 1 = private

        4.8.3. Message Example

            0x08 0x00

    4.9. Player Asking to Join a Room

        This message is sent by the client to the server to indicate
        that the player wants to join a room.

        4.9.1. Message size

            The message is 1 bytes long.

        4.9.2. Message Format

            The message is formatted as follows:

            1 byte: message type (9)

        4.9.3. Message Example

            0x09

    4.10. Room Joined

        This message is sent by the server to the client to indicate
        that he joined a room.

        4.10.1. Message size

            The message is 4 bytes long.

        4.10.2. Message Format

            The message is formatted as follows:

            1 byte: message type (10)
            2 byte: room id (short)
            1 byte: player id (char)

        4.10.3. Message Example

            0x0A 0x00 0x01 0x01

    4.11. Time Before the Game Starts

        This message is sent by the server to the client to indicate
        the time before the game starts.

        4.11.1. Message size

            The message is 6 bytes long.

        4.11.2. Message Format

            The message is formatted as follows:

            1 byte: message type (11)
            4 byte: time before the game starts in seconds (int)
            1 byte: booleen game started (char) -> 0 = false ; 1 = true

        4.11.3. Message Example

            0x0B 0x00 0x00 0x00 0x01 0x01

    4.12. Client Ping

        This message is sent by the client to the server to indicate
        that he is still connected.

        4.12.1. Message size

            The message is 1 bytes long.

        4.12.2. Message Format

            The message is formatted as follows:

            1 byte: message type (12)

        4.12.3. Message Example

            0x0C

    4.13. Other Player Joined Game

        This message is sent by the server to the client to indicate
        that another player joined the game.

        4.13.1. Message size

            The message is 2 bytes long.

        4.13.2. Message Format

            The message is formatted as follows:

            1 byte: message type (13)
            1 byte: player id (char)

        4.13.3. Message Example

            0x0D 0x01

    4.14. Other Player Left Game

        This message is sent by the server to the client to indicate
        that another player left the game.

        4.14.1. Message size

            The message is 2 bytes long.

        4.14.2. Message Format

            The message is formatted as follows:

            1 byte: message type (14)
            1 byte: player id (char)

        4.14.3. Message Example

            0x0E 0x01

    4.15. Missile Destroyed

        This message is sent by the server to the client to indicate
        that a missile has been destroyed (hit an enemy or a player,
        or went out of the screen).

        4.15.1. Message size

            The message is 10 bytes long.

        4.15.2. Message Format

            The message is formatted as follows:

            1 byte: message type (15)
            4 byte: missile id (int)
            1 byte: missile type (char) -> 1 = player ; 2 = enemy
            2 byte: position x (short)
            2 byte: position y (short)

        4.15.3. Message Example

            0x0F 0x00 0x00 0x00 0x01 0x02 0x00 0x01 0x00 0x01

5. Communication Flow

    Each message is sent by the server to the client or by the client
    to the server. The server and the client can send and receive
    messages at any time. If the server does not receive a message
    from the client during 10 seconds, the client is considered
    disconnected.

6. Security and Error Handling

    If a command is not recognized by the server or the client, they
    won't do anything.

7. References

    [1] UDP protocol (RFC 768):
        https://tools.ietf.org/html/rfc768
        https://www.ietf.org/rfc/rfc768.txt

8. Copyright

    Copyright (c) 2023 EpitechPromo2026

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

9. Authors

    - Martin d'HÃ©rouville <martin.d-herouville@epitech.eu>
    - David Benistant <david.benistant@epitech.eu>
    - Thomas Ott <thomas.ott@epitech.eu>
    - Oscar Frank <oscar.frank@epitech.eu>
    - Lucas Binder <lucas.binder@epitech.eu>

10. Acknowledgments

    Acknowledge anyone or any organization that contributed to the
    development of this protocol.
